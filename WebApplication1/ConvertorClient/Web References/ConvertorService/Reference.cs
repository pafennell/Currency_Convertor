//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
// 
#pragma warning disable 1591

namespace ConvertorClient.ConvertorService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebService1Soap", Namespace="http://CurrencyConvertor/")]
    public partial class WebService1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getCurrencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertCurrencyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebService1() {
            this.Url = global::ConvertorClient.Properties.Settings.Default.ConvertorClient_ConvertorService_WebService1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getCurrencyCompletedEventHandler getCurrencyCompleted;
        
        /// <remarks/>
        public event convertCurrencyCompletedEventHandler convertCurrencyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CurrencyConvertor/getCurrency", RequestNamespace="http://CurrencyConvertor/", ResponseNamespace="http://CurrencyConvertor/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getCurrency(string phoneNumber, double txt_Amount, string lbl_Error) {
            this.Invoke("getCurrency", new object[] {
                        phoneNumber,
                        txt_Amount,
                        lbl_Error});
        }
        
        /// <remarks/>
        public void getCurrencyAsync(string phoneNumber, double txt_Amount, string lbl_Error) {
            this.getCurrencyAsync(phoneNumber, txt_Amount, lbl_Error, null);
        }
        
        /// <remarks/>
        public void getCurrencyAsync(string phoneNumber, double txt_Amount, string lbl_Error, object userState) {
            if ((this.getCurrencyOperationCompleted == null)) {
                this.getCurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrencyOperationCompleted);
            }
            this.InvokeAsync("getCurrency", new object[] {
                        phoneNumber,
                        txt_Amount,
                        lbl_Error}, this.getCurrencyOperationCompleted, userState);
        }
        
        private void OngetCurrencyOperationCompleted(object arg) {
            if ((this.getCurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrencyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://CurrencyConvertor/convertCurrency", RequestNamespace="http://CurrencyConvertor/", ResponseNamespace="http://CurrencyConvertor/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertCurrency(double txt_Ammount, string listItem, string lbl_Result) {
            object[] results = this.Invoke("convertCurrency", new object[] {
                        txt_Ammount,
                        listItem,
                        lbl_Result});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertCurrencyAsync(double txt_Ammount, string listItem, string lbl_Result) {
            this.convertCurrencyAsync(txt_Ammount, listItem, lbl_Result, null);
        }
        
        /// <remarks/>
        public void convertCurrencyAsync(double txt_Ammount, string listItem, string lbl_Result, object userState) {
            if ((this.convertCurrencyOperationCompleted == null)) {
                this.convertCurrencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertCurrencyOperationCompleted);
            }
            this.InvokeAsync("convertCurrency", new object[] {
                        txt_Ammount,
                        listItem,
                        lbl_Result}, this.convertCurrencyOperationCompleted, userState);
        }
        
        private void OnconvertCurrencyOperationCompleted(object arg) {
            if ((this.convertCurrencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertCurrencyCompleted(this, new convertCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getCurrencyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void convertCurrencyCompletedEventHandler(object sender, convertCurrencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertCurrencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertCurrencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591